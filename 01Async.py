import argparse
import asyncio
import os
from pathlib import Path
import shutil
import logging

from aiofiles import os as aio_os

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def get_folder_path(prompt_text):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —à–ª—è—Ö—É –¥–æ –ø–∞–ø–∫–∏."""
    while True:
        folder_path = input(prompt_text)
        path = Path(folder_path)
        if path.exists() and path.is_dir():
            return path
        else:
            print(f"–ü–∞–ø–∫–∞ {folder_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –Ω–µ —î –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—î—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –∞–±–æ –∑–∞–ø–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    parser = argparse.ArgumentParser(description='–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –ø–æ –ø—ñ–¥–ø–∞–ø–∫–∞—Ö –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–æ–∑—à–∏—Ä–µ–Ω—å.')
    parser.add_argument('source_folder', nargs='?', type=str, help='–®–ª—è—Ö –¥–æ –≤–∏—Ö—ñ–¥–Ω–æ—ó –ø–∞–ø–∫–∏')
    parser.add_argument('output_folder', nargs='?', type=str, help='–®–ª—è—Ö –¥–æ —Ü—ñ–ª—å–æ–≤–æ—ó –ø–∞–ø–∫–∏')
    args = parser.parse_args()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤, —è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω—ñ, –∑–∞–ø–∏—Ç–∞—Ç–∏ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if not args.source_folder:
        args.source_folder = get_folder_path("–í–≤–µ–¥—ñ—Ç—å —à–ª—è—Ö –¥–æ –≤–∏—Ö—ñ–¥–Ω–æ—ó –ø–∞–ø–∫–∏: ")
    if not args.output_folder:
        args.output_folder = get_folder_path("–í–≤–µ–¥—ñ—Ç—å —à–ª—è—Ö –¥–æ —Ü—ñ–ª—å–æ–≤–æ—ó –ø–∞–ø–∫–∏: ")

    return args

def print_directory_tree(directory, indent=''):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –≤–∏–≤–µ–¥–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π."""
    files = list(directory.iterdir())
    files.sort()
    for file in files:
        if file.is_dir():
            print(f"{indent}üìÅ {file.name}")
            print_directory_tree(file, indent + '    ')
        else:
            print(f"{indent}üìÑ {file.name}")

# –û—Ç—Ä–∏–º—É—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∑ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –∞–±–æ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
args = parse_arguments()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö —à–ª—è—Ö—ñ–≤ –¥–ª—è –≤–∏—Ö—ñ–¥–Ω–æ—ó —Ç–∞ —Ü—ñ–ª—å–æ–≤–æ—ó –ø–∞–ø–æ–∫
source_path = Path(args.source_folder)
output_path = Path(args.output_folder)

async def copy_file(file_path, destination_folder):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É –≤ —Ü—ñ–ª—å–æ–≤—É –ø–∞–ø–∫—É."""
    try:
        destination_folder.mkdir(parents=True, exist_ok=True)
        dest_file_path = destination_folder / file_path.name
        logger.info(f'–ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É {file_path} –¥–æ {dest_file_path}')
        await aio_os.makedirs(destination_folder, exist_ok=True)
        await asyncio.to_thread(shutil.copy, file_path, dest_file_path)
    except Exception as e:
        logger.error(f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É {file_path}: {e}')

async def read_folder(folder_path, output_folder):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —á–∏—Ç–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤ —É –ø–∞–ø—Ü—ñ."""
    try:
        for root, dirs, files in os.walk(folder_path):
            for file_name in files:
                file_path = Path(root) / file_name
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—ñ–¥–ø–∞–ø–∫—É –¥–ª—è —Ñ–∞–π–ª—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
                extension_folder = output_folder / file_path.suffix[1:].upper() if file_path.suffix else output_folder / 'NO_EXTENSION'
                await copy_file(file_path, extension_folder)
    except Exception as e:
        logger.error(f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –ø–∞–ø–∫–∏ {folder_path}: {e}')

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —á–∏—Ç–∞–Ω–Ω—è —Ç–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤."""
    if not source_path.exists():
        logger.error(f'–í–∏—Ö—ñ–¥–Ω–∞ –ø–∞–ø–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: {source_path}')
        return

    await read_folder(source_path, output_path)
    logger.info('–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.')
    print("\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∏—Ö—ñ–¥–Ω–æ—ó –ø–∞–ø–∫–∏:")
    print_directory_tree(source_path)
    print("\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ü—ñ–ª—å–æ–≤–æ—ó –ø–∞–ø–∫–∏:")
    print_directory_tree(output_path)

# –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó read_folder —É –≥–æ–ª–æ–≤–Ω–æ–º—É –±–ª–æ—Ü—ñ
if __name__ == '__main__':
    asyncio.run(main())
